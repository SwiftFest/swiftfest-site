-
  id: "307"
  title: "Coffee Break"
  place: "Sponsors' lobby (2nd floor)"
  service: true
  description: "The best time to talk with speakers and attendees"
  speakers: []
  subtype: meta
-
  id: "503"
  title: "Lunch"
  place: "Sponsors' lobby (2nd floor)"
  description: ""
  service: true
  speakers: []
  subtype: meta
-
  id: "504"
  title: "Registrations and badges"
  place: "Entrance"
  description: ""
  service: true
  speakers: []
  subtype: meta
-
  id: "001"
  title: "Keynote: Clean Agile"
  place: "Virginia Wimberly Theater"
  description: |
    This talk is about Agile.  What it was, what it is, and what it will be.  This is a back-to-basics talk that covers the history of Agile, what motivated it, and what has happened to it since.  The talk covers the basic practices of Agile, and compares and contrasts those practices with the current menagerie of Agile processes.
  outcome: |
    - What was Agile and what is it now
    - How agile is evolving and why does it matter
  subtype: presentation
  speakers: ["1"]
#  video: "https://video-url-goes-here"
-
  id: "002"
  title: "Keynote: Programming with Purpose"
  place: "Virginia Wimberly Theater"
  description: "Purpose comes in all sizes, big and small. My small purpose is to get through delivering this talk without embarrassing myself. My big purpose is to help as many people as I can in small ways every day. Notice I said small ways. Why small ways? Because the biggest moments in life tend to happen on the way to your plans. Think about the most significant moments in your life. The pivotal points that changed everything. If you’ve ever fallen in love, there’s a good chance that you never planned for it to happen on the day it did. And later... if it didn’t work out, I bet you didn’t plan that either. This is not to discount plans or goals. I firmly believe in having a plan and setting a destination before you embark on your journey. Goals are necessary. Sort of like the bread on a sandwich. The goals hold it all together but the best parts are of the the middle."
  subtype: presentation
  speakers: ["3"]
-
  id: "003"
  title: "SwiftUI Animations and Gestures (4h)"
  place: "Black Box Theater"
  description: |
    Take your static design to the next level and build real apps with the simplicity of a prototyping tool. The best way for beginners to learn code, and the most efficient way for developers to learn design.
    This workshop is made for designers and developers who are passionate about collaborating and building real apps for iOS and macOS. It's beginner-friendly, but it's also packed with design tricks and efficient workflows for building great user interfaces and animated interactions.

    Agenda:
    - 1:00 Intro
    - 1:15 Layout and Stacks
    - 2:00 Components and Visual Effects
    - 2:30 Gestures and Events
    - 3:00 Break
    - 3:30 SF Symbols and Variables
    - 4:00 List with Data
    - 4:30 Menu Animation and Blur

  outcome: |
   - Build an iPhone app from scratch
   - Adaptive layouts
   - Animate views and screens
   - Add gestures and apply 3D transforms
   - iOS 13 design tips and SF Symbols
  subtype: workshop
  complexity: "beginner / intermediate"
  speakers: ["12"]
-
  id: "004"
  title: "To mock ’to mock a mockingbird’"
  place: "Virginia Wimberly Theater"
  description: |
    Did you ever notice that there’s no “fun” in Object-Oriented or Protocol-Oriented programming but that functional programming starts with "fun"? In this fast-paced talk we don’t emphasize functional programming because it’s good for you - we look at games and puzzles that go back nearly one hundred years to the invention of combinators. Don’t worry, we’ll get to the useful application part at the end - but let’s begin by just playing.
  outcome: |
   - The foundations of functional programming
   - The techniques of modern day functional programming in these ideas from logic
   - The benefits of using a combinator approach for smoothing and describing some of the flow of logic and control in your applications
  subtype: presentation
  speakers: ["13"]
  complexity: "Intermediate"
-
  id: "005"
  title: "How to Include Machine Learning in your iOS App"
  place: "Roberts Studio Theater"
  description: "Machine learning models don’t deliver value on their own. They need to be integrated into a product to improve user experience and fulfill a business need. Fortunately, this is a particularly exciting time to include ML in your mobile apps, thanks to a wealth of new libraries and technologies in this space."
  outcome: |
   - Why you should include ML in your mobile devices
   - Architectural + technical considerations for ML on mobile
   - A walk-through of different tools for integrating ML into your iOS apps

   We will also walk through an end-to-end app example, demonstrating how Skafos ties it all together to enable enterprise-grade delivery and integration.

  subtype: presentation
  speakers: ["8"]
-
  id: "006"
  title: "The Reactive Code That Broke My Brain and Changed My Mind (just in time for Combine)"
  place: "Roberts Studio Theater"
  description: |
   After almost five years of working with ReactiveCocoa and RxSwift, I still felt like reactive (Rx) programming had limited use in my work. But with Swift and RxSwift maturing, I was looking for a way to try it more.
   This spring, a colleague and I decided to use it whole-heartedly on a project. We established some guidelines that led us to an extremely clean Model-View-ViewModel implementation with a declarative ViewController and stateless ViewModel.
   And when Apple announced Combine at WWDC this year, we were glad we did because this code will convert to SwiftUI/Combine more easily.

   To start, I’ll cover the basic ideas of Rx (RxSwift and Combine). But this talk is less about Rx operators and more about how to use Rx to build a reactive architecture.
   I’ll show some code from two apps—Trello (RxSwift) and a new workout app I’m working on (Combine).
   If you have no Rx experience, in this session I hope to show you some motivating examples that might convince you to give it a try.
   If you’re using Rx, I want to show you some techniques for using it to make MVVM structures that are more testable and easier to maintain.
  outcome: |
   - The basic ideas behind Rx that all Rx libraries share
   - The "why" for Rx style code 1) how it can be radically different from typical Objected-Oriented structures
   - How to do Model-View-ViewModel (MVVM) with Rx
     1) a stateless/pure-functional ViewModel;
     2) a more declarative View/ViewController
   - How to unit test the resulting ViewModel
  subtype: presentation
  speakers: ["7"]
-
  id: "008"
  title: "Code Golfing"
  place: "Roberts Studio Theater"
  description: |
   Code Golfing is a fun type of recreational programming where “players” strive to achieve the shortest possible source code that implements certain functionality. Using Swift to Code Golf is fun in itself, but there is a lot we can learn from this exercise. Join me in exploring practical takeaways from thinking about each line of Swift code we write!
  outcome: |
    - What is Code Golfing?
    - Code Golfing is fun, but there is a right way and a wrong way — and the right way is really helpful.
    - Learn the advantages of writing fewer lines of code.
    - How can we write fewer lines of code in Swift? (edited)
  subtype: presentation
  complexity: "Intermediate"
  speakers: ["18"]
-
  id: "009"
  title: "Straying From the Happy Path: Taking Control of Errors in Swift"
  place: "Virginia Wimberly Theater"
  description: |
   Have you ever seen a code comment saying “this should never happen”? Have you ever wondered what would happen if it did? Swift has a diverse set of error-handling capabilities, from using `throw` to send errors up the stack to using a `Result` to handle errors in asynchronous methods. In this talk, we’ll look at the landscape of handling errors in Swift, create new ways of expressing and handling them, and show how even the most impossible code-level situations can have 100% test coverage.
  outcome: |
    - The history of error handling from Objective-C to Combine and SwiftUI
    - How to better handle errors in your code, test error-handling code paths, and log errors easily and conveniently
    - How to achieve test coverage of your code’s error paths
    - Which tests are important to write to understand your error paths
  subtype: presentation
  complexity: "Advanced"
  speakers: ["14"]
-
  id: "013"
  title: "To the Core of Core NFC"
  place: "Virginia Wimberly Theater"
  description: |
   NFC has been around for a while and we use it every day in things like Apple Pay but how does it work and what features are actually available for developers to use? Until recently NFC was pretty limited on iOS and devs used to struggle to find use cases they could implement in their apps. NFC itself has plenty of applications but we were not able to take full advantage of them because of these limitations but now that Apple has announced tag writing support, we have more possibilities! Some of your Android friends might tell you: “Well we have had that for a long time!” and yeah it’s true, but without Apple opening their APIs it was hard for companies to find a compelling case to build apps where only one platform was going to be supported.

   In this talk, you will learn the basics of Near Field Communication such as tagging, different types of tags and their specifications. We will also take a peak to these new features and implement some of them in a quick example.

   Join me to see why I think learning about the new Core NFC features are important and the long-lasting implications they will have around the world.

  outcome: |
   - Basics of Near Field Communication and tagging
   - Basics of the new Core NFC features and an example of using tag writing feature
   - The importance of the latest announcements
  subtype: presentation
  speakers: ["25"]
  complexity: "Intermediate"
-
  id: "015"
  title: "Don't Join a Cult. Learn Mindfulness."
  place: "Roberts Studio Theater"
  description: |
   Perfectionism. Fear. Guilt. Self-Doubt. These tricky demons can shatter our productivity, silence our best ideas, and block us from our greatest potential. Take back the reins and discover what you’re really capable of. In this talk, you’ll learn the basics of mindfulness through true stories of reptilian cults, imprisoned stalkers, and a very unusual dinner guest.
  outcome: |
    - A series of bizarre psychological tales
    - The importance of mindfulness in a stressful world.
  subtype: presentation
  speakers: ["26"]
-
  id: "014"
  title: "Testing. Testing. One. Two."
  place: "Roberts Studio Theater"
  description: |
   Testing is critical, but can be difficult. In this talk we will explore using Swift’s protocol oriented programming for User Interface testing to create light-weight interfaces that are composed of user behavior and application state. We will discuss the pro’s and con’s of writing tests this way. We will also discuss options for further development of the technique. This talk isn’t just for testers. This talk is also for product managers, designers, developers, and customers! As a use case, will will walk through logging into and using a movie rating app. We will build up a protocol that allows tests to be read as a set of instructions for an actual user. When we are done, we will have a better understanding of behavior driven development, UI testing, and protocol oriented programming in Swift.
  outcome: |
    - A history of testing (the boring stuff)… Agile, Test Driven Development, and Behavior Driven Development
    - Swift Protocol Oriented Programming for UI Testing.. Behavior, State and the conversation
    - Making it work together
  subtype: presentation
  complexity: "Intermediate"
  speakers: ["22"]
-
  id: "019"
  title: "What Happens When iOS Turns Against You"
  place: "Virginia Wimberly Theater"
  description: |
   Follow me on a journey of peril and intrigue as I walk you through the most difficult bug of my career. The many frameworks of Cocoa Touch are the cornerstone of modern iOS apps. But what happens when the building blocks start to work against you? I'll take you through the lifecycle of a bug we encountered at Tinder on the eve of the launch of iOS 12. To this day, it is one of the most puzzling and challenging issues I've encountered. The solution to which has wide-ranging implications in any app that utilizes NSUserDefaults. At the end of this session, you will learn steps you can take to avoid a devastating pitfall in Foundation. This issue was discovered in Tinder and I will walk you through a possible solution should you encounter it in your own apps as well.
  outcome: |
   Attendees should expect to walk away with an understanding of the deeper workings of UserDefaults and unexpected, yet commonly experienced, issues with the defaults system.
  subtype: presentation
  speakers: ["24"]
  complexity: "Intermediate"
-
  id: "020"
  title: "Protocol Oriented Programming"
  place: "Virginia Wimberly Theater"
  description: |
   They said Swift is “protocol oriented,” so you wrote protocols. But you wanted them to be generic, so you added associated types. But your collections broke, so you added type-erasers. But your “as”-casts broke, so you switched to Any. But then everything broke, so you read about Mirror. And the tears began. Why did it have to be so hard to make an array?

   It doesn’t have to be so hard. But it’s very easy to use the wrong tools to solve the wrong problems. In this session I’ll help you reevaluate what it means to write generic Swift and how to choose the right tools for the job. Whether your goal is reusable view controllers, flexible networking, data-driven UI, effective unit testing, or just the joy of elegant data structures, you’ll learn how to work with Swift and not fight the compiler.

   This talk assumes familiarity with Swift syntax for generics, protocols, extensions, enums, and first-class functions (such as completion handlers), as well as the basic differences between Swift structs and classes. More advanced topics, including protocols with associated types, enums with associated data, closures, and functions as return types, will be introduced and explained.
  outcome: |
    - How to develop generic and reusable code in Swift, starting from concrete implementations and finding the abstractions within. They will
    - The vocabulary of generics, including existentials and the many kinds of type erasure
    - The tools of generic Swift, including protocols, associated types, and generic structs
    - What are and how to use generic functions and composition of types and functions to write more flexible code without adding complexity
  subtype: presentation
  complexity: "Advanced"
  speakers: ["6"]
-
  id: "021"
  title: "The challenges in building a social app using swift"
  place: "Roberts Studio Theater"
  description: |
   Anyone can create and change the way things are by using tech to solve a problem in the community. How I, as a woman seeing my female family members and friends being abused, decided to do something about it. That is why I created a social app - PEVO - that can change the world.
  outcome: |
    - The challenges of building a social app
    - Helping others by understanding the problem
    - Keeping the solution to the problem simple thinking of the people using the app
    - Research what your community need
  subtype: presentation
  complexity: "Intermediate"
  speakers: ["5"]
-
  id: "023"
  title: "Bringing A Stock-Style Ticker to Tinder"
  place: "Virginia Wimberly Theater"
  description: |
   Tinder's famous LikesYou feature has a golden pill view that shows the number of swipe rights a particular user receives while using the app. Inspired by Robinhood's stock ticker, Tinder has recently upgraded their pill view to have similar sweet scrolling animation. However, since the pill view had letters along with digits, it faced different set of problems. The session will explain how this unique ticker view has been implemented.Through this talk, you will be able to understand what it takes to implement a tickerView like the one from Robinhood and how Tinder has solved the unique set of challenges due to implementing scrolling digits and letters in a single view.
  outcome: |
    - How to implement a ticker view that can scroll embedded digits vertically within letters.
    - How to break a string into individual characters and control the position, width, kerning for each of them while still maintaining support for RTL languages
    - Further considerations on utilizing DiffableDataSource and NSDiffableDataSourceSnapshot (new iOS 13, Swift 5 API) to implement the ticker
  subtype: presentation
  complexity: "intermediate"
  speakers: ["23"]
-
  id: "024"
  title: "Voiceover On..."
  place: "Roberts Studio Theater"
  description: |
   In a world obsessed with user experience, how much are we thinking about the experience we provide for our visually impaired users? I’ve always strived to make my apps accessible, but merely providing access isn't enough. We should be aspiring to provide an exceptional experience for everyone. I wanted to understand what makes for truly great accessible design, so I turned VoiceOver on for a week...

    In this talk, I’ll share the findings of my experiment. We'll discover the good and bad patterns in commonly-used apps, see what separates the fantastic from the frustrating, and learn about what you can do today to bridge some of the common UX gaps.
  outcome: |
    - How they can make their apps more accessible for visually impaired users
    - What are the small code changes to make to improve apps significantly
    - What VoiceOver Rotor is and how to leverage it to provide a spectacular experience for VoiceOver users.
    - A different perspective when thinking about accessibility.
  subtype: presentation
  complexity: "Intermediate"
  speakers: ["20"]
-
  id: "025"
  title: "So you want to build an ARKit app"
  place: "Virginia Wimberly Theater"
  description: |
    ARKit has shown how AR can be integrated into apps to make them more engaging and fun. Although AR has mainly been introduced by games such as Pokémon Go!, it has many practical applications. If you are thinking about using ARKit in your app, this talk is for you.
    Last year I co-authored the ARKit by Tutorials book, and developed a couple of ARKit apps. This talk covers challenges I experienced building these apps such as ensuring good app performance, handling problematic scenarios and improving plane detection. Learn how to use ARKit to its full potential, keep your AR apps performant and deliver a polished end-user experience.
  outcome: |
    - You will learn user interface decisions you will need to make when building AR apps
    - I will share some limitations of ARKit, problems you might face and how to handle them
    - You will walk away with a basic understanding of how ARKit works and be ready to make awesome AR apps
  subtype: presentation
  complexity: "intermediate"
  speakers: ["21"]
-
  id: "026"
  title: "Encoding and Decoding in Swift"
  place: "Virginia Wimberly Theater"
  description: |
   Ever wonder what’s actually going on inside JSONEncoder and JSONDecoder? Why doesn't JSONEncoder conform to the Encoder protocol? What's a CodingKey, and what are all of those "containers" for?
   This talk will be a deep dive into encoding and decoding in Swift: what all of the related protocols are, how they fit together, and how to use them. You will come away from this talk ready to customize how your Swift types are encoded and decoded, and with the knowledge necessary to start writing encoders and decoders of your own.
  outcome: |
   - Why encoding and decoding are useful
   - How to encode and decode your Swift types
   - How to highly customize encoding and decoding behavior
   - How standard library encoder and decoders work under the hood
   - Background knowledge needed to write encoders and decoders of your own
  subtype: presentation
  complexity: "advanced"
  speakers: ["15"]
-
  id: "027"
  title: "You Belong With Me: An Extension Love Story"
  place: "Virginia Wimberly Theater"
  description: |
    Extensions allow you to add functionality to a previously existing class, structure, enumeration, or protocol. This gives you the power to add new behavior to your own code, third-party libraries, and even Apple frameworks.  While this sounds simple, extensions allow you to up your Swift game and amplify your code in so many ways!  In this talk, we will explore using extensions to have cleaner code, conform to protocols, add new initializers, extend protocols, and so much more.  We’ll also show off some extensions that you didn’t even know that you wanted.  Fall in love with extensions today!
  outcome: |
   - What extensions are and how to add them to your code
   - Using extensions for cleaner code and conforming to protocols
   - Using extensions to add a new initializer to a class or struct
   - Using extensions to add new methods to a protocol
   - Using extensions to add computed properties
   - Fun places to add convenience methods
  subtype: presentation
  complexity: "intermediate"
  speakers: ["9"]
-
  id: "028"
  title: "Recognize text, facial features, and objects in images with ML Kit for Firebase (1.5h)"
  place: "Black Box Theater"
  description: "ML Kit is a mobile SDK that brings Google's machine learning expertise to Android and iOS apps in a powerful yet easy-to-use package. Whether you're new or experienced in machine learning, you can easily implement the functionality you need in just a few lines of code. There's no need to have deep knowledge of neural networks or model optimization to get started. In this codelab we will build a sample app using Firebase MLKit for iOS."
  outcome: |
    - How to use the ML Kit Text Recognition API to detect text in images
    -  How to use the ML Kit Face Contour API to identify facial features in images
    - How to use the ML Kit Cloud Text Recognition API to expand text recognition capabilities (such as non-Latin alphabets) when the device has internet connectivity
    - How to host a custom pre-trained Tensor Flow Lite model using Firebase
    - How to use the ML Kit Custom Model API to download the pre-trained TensorFlow Lite model to your app
    - How to use the downloaded model to run inference and label images
  subtype: workshop
  complexity: "intermediate"
  speakers: ["10"]
-
  id: "029"
  title: "Accessibility -> Up to 11!"
  place: "Virginia Wimberly Theater"
  description: |
    Let’s go together on a journey to not just create accessible apps, but awesome experiences that absolutely all your users will be able to use and love. How to deal with Dynamic Types and Auto Layout so your UI adapts to any font size the user may prefer; What happens with those hidden actions, which are unveiled with a gesture, when using the app with VoiceOver; What to do when the user wants inverted colors, or reduce motion, or reduce transparency…? Do you know what the Rotor is and what it is used for? And we’ll have to test all this! Let’s find out how.

    It is time to bring the accessibility levels of your app up to eleven!
  outcome: |
   - UIAccessibility and VoiceOver: from zero to pro
   - How Adaptive User Interfaces with Dynamic types and Large Content Viewer works
   - And more: Smart Inverted Colours, Voice Control, Switch Control, etc.
  subtype: presentation
  complexity: "Beginner"
  speakers: ["27"]
-
  id: "030"
  title: "Splitting Views - The Nitty-Gritty of Container View Controllers"
  place: "Virginia Wimberly Theater"
  description: |
    When does a `UIView` need a `UIViewController`? The most common answer is to keep one VC per-screen, but the benefits of a ViewController can be felt by any view of any size. In this talk we will take a look at how and why to use Container View Controllers in your apps and discuss best practices and tips for keeping things manageable no matter how many ViewControllers are on screen.
  outcome: |
   - Be familiar with Container View Controllers
   - Know how to set up Container View Controllers programmatically and in Interface Builder
   - Have formed opinions about what Views would benefit from VCs in their apps
   - Identify best practices around managing Container View Controllers"
  subtype: presentation
  complexity: "Beginner"
  speakers: ["28"]
-
  id: "031"
  title: "SwiftUI: Declarative UI development for the modern era"
  place: "Virginia Wimberly Theater"
  description: |
    This talk will introduce the new SwiftUI framework and will provide an overview of how it is used to declaratively build user interfaces across all of the Apple platforms. Emphasis will be given on how user-interface code can be shared between platforms, from the smallest watchOS, through iPhoneOS/iPadOS, and up to macOS and tvOS.
  outcome: |
    The attendees will have enough knowledge to start developing apps using the SwiftUI framework.
  subtype: presentation
  complexity: "Beginner"
  speakers: ["29"]

-
  id: "033"
  title: "Free Cocoa: hack mobile app and skim the cream"
  place: "Virginia Wimberly Theater"
  description: |
    With a set of few simple tools and a bit of enthusiasm, mobile app binary can be read like an open book. My presentation describes practical attack on an iOS app. Realizing how easy the attack can be, is the first step to improve security of your apps.
  outcome: |
   - What is https eavesdropping with mitmproxy
   - How to secure https with ssl-pinning
   - How to decompile an app using Hopper
   - How to secure the app with MachObfuscator
  subtype: presentation
  complexity: "Intermediate"
  speakers: ["30"]

-
  id: "034"
  title: "Remote Connections: Fostering Relationships in Distributed Teams"
  place: "Roberts Studio Theater"
  description: |
    It takes more than good internet to be connected to your team when you're working remotely. When you don't share a physical space with your colleagues, you miss out on interpersonal connections which otherwise come for free. This session will cover why these connections are important, and how you and your organization can work to build them.
  outcome: |
   - An appreciation for the benefits of good rapport among colleagues
   - An understanding of potential gaps in communication with their distributed colleagues
   - Concrete ways to build stronger working relationships in distributed and partially-distributed organizations
  subtype: presentation
  complexity: "Beginner"
  speakers: ["31"]
-
  id: "035"
  title: "How We Scaled App Development at Wayfair with 100+ app developers"
  place: "Roberts Studio Theater"
  description: |
    App development is inherently hard at scale.  On one side, app developers have to create new features that users can use, which in turn helps the business make money. On the other side, app developers need to keep apps fast, consistent, fluid, fun, modular and everything users expect any app to be.  A small app team can do both at once, but as the team scales, keeping focus on these two things equally in a connected way is actually hard, especially at Wayfair with over a hundred app developers and multiple apps across iOS and Android and business areas.  Come listen to our journey so you can learn from how we organized app teams to scale to new heights in order to deliver successful “appy” apps!
  outcome: |
   - The challenges of app development at scale
   - Why a good organization model is important especially at scale
   - Some organization models to support app development at scale
   - The steps to get started with your scaling process
  subtype: presentation
  complexity: "Beginner"
  speakers: ["32"]
-
  id: "036"
  title: "Going one step further into ARKit with CoreML and Turi Create"
  place: "Virginia Wimberly Theater"
  description: |
    ARKit itself seems to have very limited functionalities. However, I extended what ARKit can do with CoreML when I developed my first AR app, Notable Me(https://itunes.apple.com/kr/app/notable-me/id1453810473). It got featured on ProductHunt(https://www.producthunt.com/posts/notable-me). I will share how I developed this AR app, so other iOS developers can also come up with creative ideas to use ARKit and CoreML. Also, I will share how a mobile developer, who doesn't know how to use Tensorflow, can create custom ML models using Turi Create, Apple's open source library to easily create mlmodels.
  outcome: |
    - How machine learning frameworks such as CoreML and MLKit can enrich ARKit app.
    - How to create and fine-tune ML models using Turi Create, even without comprehensive knowledge of machine learning
  subtype: presentation
  complexity: "Intermediate"
  speakers: ["33"]
-
  id: "037"
  title: "What time is it? (Seriously, how does your phone know that)"
  place: "Roberts Studio Theater"
  description: |
   When you turn on your phone's screen, there's only one thing that's always there every time, reassuring you that everything is in order: the time. But how does your phone know what time it is?

   Through the ages, the question of "what time is it" has gone from inconceivable to mildly interesting to extremely difficult to trivial. Let's look at how it got here and how it works today. We'll cover how anyone knows what time it is, how computers think about time, and how your phone stays up to date(/time).
  subtype: presentation
  outcome: |
    You'll learn about an important but oft-overlooked technology, timekeeping. Plus you won't look at your lock screen the same way again.
  speakers: ["34"]
-
  id: "038"
  title: "Cut Corners to Accomplish More: How a minimally viable app, became #1 of Health and Fitness apps"
  place: "Roberts Studio Theater"
  description: |
   We developers love building fully featured apps and we build them the best way we know; but sometimes this leads us to toil for too long on apps that could have succeeded just as well, with insanely less effort and time.

   For the next 25 minutes we ask: do apps need server backends to deliver content? How can apps succeed while missing important features? In this non-coding, product and customer oriented session, learn about the decision-making philosophy for the WeCroak app; an app that cut development corners, while still delivering a compelling user experience. The App uses an on-device content architecture that eschews a backend and lacked seemingly important features at launch. After the App went viral, how did this architecture and lack of features hold up?
  subtype: presentation
  outcome: |
    - An alternative example to the typical client-server architecture for delivering app content: the on-device model
    - How to evaluate the tradeoffs of an on-device content model when experiencing explosive userbase growth.
    - Understand how identify app features that can be prototyped quickly and don’t need extensive development before launch.
    - How to evade fears of launching a product “too early”.
  speakers: ["35"]
-
  id: "039"
  title: "Mutation Testing: An Automated Technique for Better Tests"
  place: "Roberts Studio Theater"
  description: |
   As a code base grows, and its test suite covers even more test cases, an important question arises: how do we know our tests are covering every case? Even when practicing test-driven development, some program branches inevitably become omitted from our test suites, a once-effective testing strategy now fails to capture every case, and team churn causes a loss of context on why certain tests were written the way they were. 

   Finding ourselves in this position is stressful at best, and can cause us to question the value of automated testing altogether. 
   This is where the practice of mutation testing becomes essential.
   This session will go through an explanation of what mutation testing is, how to use it, how not to use it, and what tooling exists to help us practice automated mutation testing. In addition, the metrics involved with mutation testing will be examined, giving you a sense of how to wield them. By the end of this session, you'll walk away with additional tools, practices, and metrics to help you and your team engineer test suites which more effectively detect bugs and missing functionality. ✅

  subtype: presentation
  outcome: |
    📚 A definition of mutation testing and mutation scores

    ❓ How mutation testing works 

    🔍 The difference between mutation scores and code coverage

    ⏱️ When (and when not) to mutation test

    💡 Common patterns and anti-patterns of mutation testing
    
    🖥️ Mutation testing tools such as Muter, Stryker, and PITest for Swift, Javascript, Java and Kotlin code

  speakers: ["4"]
-
  id: "032"
  title: "Keynote: Make room for all, not war!: Inclusion means all y'all"
  place: "Virginia Wimberly Theater"
  description: |
   After 18 years of ups and downs in the tech industry, Diana Rodriguez has seen good, bad and ugly. Leading worldwide community organisation for a non-profit has been an interesting experience where she found herself advocating for the exact same things she had to stand up for 18 years ago. In a sincere and honest talk about diversity, inclusion and evolution in the tech ecosystem, this isn't a SJW rant. It's an account of the mishaps of a woman in tech who decided to make a difference.
   (what do you reckon?)
  subtype: presentation
  speakers: ["2"]
-
  id: "999"
  title: "Talk to be announced"
  description: "More speakers coming soon!"
  subtype: presentation
  speakers: []
-
  id: "998"
  title: "Workshop to be announced"
  description: "More speakers coming soon!"
  subtype: presentation
  speakers: []

-
  id: "1511"
  title: "The workshop continues…"
  description: "Each workshop is at least 90 minutes"
  subtype: meta
  speakers: []
-
  id: "1512"
  title: "The workshop ends…"
  description: "Each workshop is at least 90 minutes"
  subtype: meta
  speakers: []
-
  id: "1513"
  title: "The talk continues..."
  description: ""
  subtype: meta
  speakers: []
-
  id: "666"
  title: ""
  description: "No talk or workshop in this time slot."
  subtype: meta
  speakers: []
-
  id: "888"
  title: "Opening Remarks"
  place: "Virginia Wimberly Theater"
  description: "Welcome to SwiftFest! Start the day with a few opening remarks and announcements and an overview of the vision and motivations of SwiftFest."
  subtype: presentation
  speakers: ["36"]
