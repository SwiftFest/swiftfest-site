-
  id: "307"
  title: "Coffee Break"
  place: "Hall"
  service: true
  description: "The best time to talk with speakers and attendees"
  speakers: []
  subtype: meta
-
  id: "503"
  title: "Lunch"
  place: "Dining room"
  description: ""
  service: true
  speakers: []
  subtype: meta
-
  id: "504"
  title: "Registrations"
  place: "Entrance"
  description: ""
  service: true
  speakers: []
  subtype: meta
-
  id: "001"
  title: "Keynote: TBA"
  description: "TBA"
  outcome: |
    - TBA
  subtype: presentation
  speakers: ["1"]
#  video: "https://video-url-goes-here"
-
  id: "002"
  title: "Keynote: Programming with Purpose"
  description: "Purpose comes in all sizes, big and small. My small purpose is to get through delivering this talk without embarrassing myself. My big purpose is to help as many people as I can in small ways every day. Notice I said small ways. Why small ways? Because the biggest moments in life tend to happen on the way to your plans. Think about the most significant moments in your life. The pivotal points that changed everything. If you’ve ever fallen in love, there’s a good chance that you never planned for it to happen on the day it did. And later... if it didn’t work out, I bet you didn’t plan that either. This is not to discount plans or goals. I firmly believe in having a plan and setting a destination before you embark on your journey. Goals are necessary. Sort of like the bread on a sandwich. The goals hold it all together but the best parts are of the the middle."
  subtype: presentation
  speakers: ["3"]
-
  id: "003"
  title: "Learn Swift"
  description: "Learn how to make an iOS app from scratch using Storyboard and the Swift language. This course is focused on building beautiful user interfaces and custom animations, elevating your product and giving you an insight into iOS development. Learn how to collaborate better with engineers and own the visual implementation of your design.

                Meng To's workshops aim to bridge the gap between design and code
                Get hands-on experience with step-by-step instructions on how to make beautiful iOS apps and Websites. Gain solid foundations needed to design from scratch, prototype quickly and bring your app ideas to life with easy-to-understand code. No coding experience required."
  outcome: |
   - TBD
  subtype: workshop
  complexity: "beginner / intermediate"
  speakers: ["12"]
-
  id: "004"
  title: "To mock ’to mockn a mockingbird’"
  description: |
    For a topic so fundamental to the practice of software engineering, designing test suites and measuring their efficacy remains difficult. For example, how does one determine the origin of a test failure in the codebase, or know if they’re designing testable components? Beyond that, what are common indicators of an over-tested codebase? Questions like these become more challenging given particular domains and applications, and usually require non-obvious testing strategies.

    To help you answer these questions, this presentation will go through the development process of a thoroughly tested audio synthesizer and demonstrate patterns and methodologies that can help you build a better test suite. By the end of the presentation, you'll have developed a toolkit for building an effective, easy-to-use, and understandable test suite.
  outcome: |
   - You will learn some of the foundations of functional programming
   - You will root the techniques of modern day functional programming in these ideas from logic
   - You will see the benefits of using a combinator approach for smoothing and describing some of the flow of logic and control in your applications
  subtype: presentation
  speakers: ["13"]
  complexity: "Intermediate"
-
  id: "005"
  title: "How to Include Machine Learning in your iOS App"
  description: "Machine learning models don’t deliver value on their own. They need to be integrated into a product to improve user experience and fulfill a business need. Fortunately, this is a particularly exciting time to include ML in your mobile apps, thanks to a wealth of new libraries and technologies in this space."
  outcome: |
   - Why you should include ML in your mobile devices
   - Architectural + technical considerations for ML on mobile
   - A walk-through of different tools for integrating ML into your iOS apps

   We will also walk through an end-to-end app example, demonstrating how Skafos ties it all together to enable enterprise-grade delivery and integration.

  subtype: presentation
  speakers: ["8"]
-
  id: "006"
  title: "The Rx Code That Broke My Brain (and Changed My Mind)"
  description: |
   After almost five years of working with ReactiveCocoa and RxSwift, I still felt like reactive programming had limited use in my work. But with Swift and RxSwift maturing, I was looking for a way to try it more.

   This spring, a colleague and I decided to use it whole-heartedly on a project. We established some guidelines that led us to an extremely clean Model-View-ViewModel implementation with a declarative ViewController and stateless ViewModel.

   To start, I’ll cover the basic ideas of RxSwift. But this talk is less about Rx operators and more about how to use RxSwift to build a reactive architecture.

   I’ll show some code from two apps—Trello and a new workout app I’m working on.

   If you have no RxSwift experience, in this session I hope to show you some motivating examples that might convince you to give it a try.

   If you’re using Rx, I want to show you some techniques for using it to make MVVM structures that are more testable and easier to maintain.
  outcome: |
   - TBA
  subtype: presentation
  speakers: ["7"]
-
  id: "007"
  title: "Collaboration by Design! “What’chu talkin’ ‘bout, Willis?”"
  description: |
   A lot of developers are quick to say that designers should learn to develop. To me, being able to design is an important skill to have as a developer. We all know that there is a significant divide when it comes to designers and developers. This split limits us to be better developers because sometimes we do not want to see the other side of things. Sometimes we as developers do not understand the designer's point of view. Developers and designers have different specialties that we can leverage from each other.

   In this talk, I will discuss the different specialties we can take advantage of from both sides. Additionally, I will cover why you should start picking your designer's brain today. Finally, I will discuss how to get started and what tools designers are using today for doing wireframes to iOS app designs.
  outcome: |
   - How design helps you as a developer and how each of us can take advantage of both sides
   - Why you should start picking your designer’s brain
   - How to get started and what tools designers are using today
  subtype: presentation
  speakers: ["7"]
-
  id: "008"
  title: "Code Golfing"
  description: |
   Code Golfing is a fun type of recreational programming where “players” strive to achieve the shortest possible source code that implements certain functionality. Using Swift to Code Golf is fun in itself, but there is a lot we can learn from this exercise. Join me in exploring practical takeaways from thinking about each line of Swift code we write!
  outcome: |
   - What is `Code Golf`.
   - Code Golfing is fun, but there is a right away and a wrong way — and the right way is really helpful.
   - Avoid the wrong way of applying a Code Golf mindset to writing code, such as “golfing” our code into something that is totally unreadable or practical like using global variables everywhere.
   - Learn the advantages of writing fewer lines of code.
   - More maintainable code and ability to do more with fewer developers — at scale, the more code we write, the more code we need to maintain. So we will inevitably end up writing more code than we can maintain.
   - Code that can be clearer.
   - Helps strengthen our Swift skills — I may touch on Code Katas here.
   - Helps to better assess dependencies. If you use a library, you get charged for every line of code. Instant losing! We should consider the complexity of our dependencies and alternatives such as copying just the lines of code that we need to perform the functionality that we need from that dependency.
   - How can we write fewer lines of code in Swift (Code Golfing).
   - Tips ranging from ternary operators, type inference, functional concepts like replacing for loops with variations of map and reducing arrays, ranges, closures, abstraction, free functions, do xib files count as code — programmatic vs interface builder UIs, etc.
   - Tests help give you a safety net to golf against.
  subtype: presentation
  complexity: "Intermediate"
  speakers: ["18"]
-
  id: "009"
  title: "Straying From the Happy Path: Taking Control of Errors in Swift"
  description: |
  Have you ever seen a code comment saying “this should never happen”? Have you ever wondered what would happen if it did? Swift has a diverse set of error-handling capabilities, from using `throw` to send errors up the stack to using a `Result` to handle errors in asynchronous methods. In this talk, we’ll look at the landscape of handling errors in Swift, create new ways of expressing and handling them, and show how even the most impossible code-level situations can have 100% test coverage.
  outcome: |
   Spanning the history of error handling from Objective-C to Combine and SwiftUI, this talk will help you better handle errors in your code, test error-handling code paths, and log errors easily and conveniently. You’ll understand not only how to achieve test coverage of your code’s error paths, but also which tests are important to write to understand your error paths.
  subtype: presentation
  complexity: "Advanced"
  speakers: ["14"]

-
  id: "022"
  title: "NSURLProtocol: Stupid Secrets, Scary Swizzling, Sorry Safety"
  description: |
   Known as “Apple-sanctioned man-in-the-middle attacks,” the `NSURLProtocol` class is a powerful Foundation abstraction that intercepts network requests at runtime before they hit the URL loading system. It has been used to implement proxy-like functionality, stub HTTP responses, eavesdrop on your 3rd party libraries’ network activity during production deployments, arbitrarily transform `URLRequest`s on the fly, or implement custom protocol schemes. Using this class well requires understanding of how it behaves at runtime, and there are a few runtime gotchas that you must know to handle!
  outcome: |
   - How to simplify test suites involving API calls by using `NSURLProtocol` to stub server responses
   - The ability to see HTTP data that 3rd party libraries and frameworks share with their hosts
   - A refresher on the few different method dispatch types in Swift
   - The dark magic that is method swizzling (exchanging method implementations of function pointers at runtime)
   - How to swizzle their way around a critical bug (Apple erroneously sets all HTTP Bodies to `nil`) in `NSURLProtocol`
   - The ability to implement API versioning, synthetic responses, remote cache invalidation, and API rerouting on the client (a lighter weight HAProxy or Varnish)
  subtype: presentation
  speakers: ["26"]
  complexity: "Intermediate"

-
  id: "011"
  title: "Great Forms 101"
  description: |
   Let's be honest here: forms are probably not the shining star of your app. But they're one of the first things a user sees, and can huge stumbling blocks to user trust if you don't give them some thought.

   So take your forms from 😡 to 😍! We'll cover UI basics, implementation details, and UX strategies for building the best forms on the App Store, all with real-world details you can take right back to your desk and start using.

   After this, your users might even wish for more forms.
  outcome: |
    - Building forms that let your users quickly and easily give you information.
    - Understanding how to get the data your app needs.
    - Learning how to get the user back to the app they love.
  subtype: presentation
  complexity: "Intermediate"
  speakers: ["16"]
-
  id: "012"
  title: "Sketching UI in Playgrounds"
  description: |
   The beginning will be a discussion on the struggle/arguments that iOS developers have over which way is better for creating UIs: Storyboards or Programmatic.

   Then, I'll present a middle ground that is the main topic: building UIs in Playgrounds. This is a technique that the Kickstarter team uses in their app (which is open source), and I use that as a starting point, but I have developed practices around it to make it more accessible.

   We'll talk about some of the benefits you get that neither Storyboards or traditional programmatic UI have (access to app behavior, animations, TDD style, very fast edit/run cycles for prototyping)

   There will be some live-coding to give the feel of what it's like to do this in the context of an app (a playground that is part of a larger app project).
  outcome: |
    - Understanding how to work in a hybrid environment with the visual experience you get in a Storyboard, but the benefits you get from a programmatic UI (creating the UI in a playground).
    - Learning all the tips and tricks to improve your efficiency while working in hybrid mode.
    - Mastering programmatic UI will be easier because you can see the effect immediately without running the app.
  subtype: presentation
  speakers: ["17"]
  complexity: "Intermediate"
-
  id: "013"
  title: "Under The Hood: Code Signing on iOS"
  description: |
   Code signing ensures that all mobile apps come from known, trusted sources and haven't been tampered with while in transit to a user's device. Though an integral part of keeping the iOS ecosystem secure, for many developers Apple's code signing methodology remains somewhat cryptic.

   We'll begin by defining code signing at a fundamental level-covering the basics of hashing and public-key cryptography-in order to gain a clear understanding of code signing before diving into Apple's implementation on iOS. Unlike other mobile platforms, code signing on iOS involves additional layers of security; we'll describe the functionality of provisioning profiles, certificates and keychains. We'll dive into why Apple's code signing is mandatory, and how it extends the concept of the chain-of-trust from the operating system to the apps, and prevents third parties from loading any potentially harmful code.
  outcome: |
   - Attendees can expect to walk away with a more firm understanding of why code signing is necessary, what it accomplishes, and how it protects you and your users.
    - Attendees can expect answers to questions such as:
     - What’s a keychain for? What are certificates and provisioning profiles?
     - How do these objects interact during the code signing process?
     - How does code signing protect me and my users?
    - We will equip attendees with the knowledge they need to build more complex applications and successfully release apps by creating clarity around Apple’s code signing methodology.
  subtype: presentation
  speakers: ["18"]
  complexity: "Advanced"
-
  id: "015"
  title: "Core Bluetooth in Swift: A Primer"
  subtype: presentation
  description: ""
  speakers: ["19"]
-
  id: "014"
  title: "Testing. Testing. One. Two."
  description: |
   esting is critical, but can be difficult. In this talk we will explore using Swift’s protocol oriented programming for User Interface testing to create light-weight interfaces that are composed of user behavior and application state. We will discuss the pro’s and con’s of writing tests this way. We will also discuss options for further development of the technique. This talk isn’t just for testers. This talk is also for product managers, designers, developers, and customers! As a use case, will will walk through logging into and using a movie rating app. We will build up a protocol that allows tests to be read as a set of instructions for an actual user. When we are done, we will have a better understanding of behavior driven development, UI testing, and protocol oriented programming in Swift.
  outcome: |
    - A history of testing (the boring stuff)… Agile, Test Driven Development, and Behavior Driven Development
    -  Swift Protocol Oriented Programming for UI Testing.. Behavior, State and the conversation
    -  Making it work together... An example
    -  Learn something… How does this help the conversation
  subtype: presentation
  complexity: "Intermediate"
  speakers: ["22"]
-
  id: "016"
  title: "The Art of the Font"
  description: |
   As developers we often take the text rendering system for granted. As a fundamental part of both iOS and macOS we often don't give it a second thought. It's just there. This session will explore: the transition from 7 segment LED text to the beautiful fonts we use today, translate the vocabulary designers use when describing text layout, and conclude by examining TextKit and how to get direct access to font paths.
  outcome: |
    A better understanding of
    - Fonts and font formats.
    - Text layout vocabulary.
    - A deeper understanding of text rendering in iOS and macOS.
  subtype: presentation
  complexity: "Advanced"
  speakers: ["21"]
-
  id: "017"
  title: "Advanced Dates and Times in Swift"
  description: |
   As a developer who’s been bitten time and time again by Daylight Saving Time and related bugs, by now you’ve mastered the art of wrangling dates and times in Swift. Or have you? This talk will cover some of the more inscrutable topics of dates and times: how many seconds are there in a particular year? How do I get a notification to fire at exactly 9:00 AM on the user’s phone? What if my user isn’t using the Gregorian calendar and I want to draw a calendar? In this talk, we’ll cover all this and more, drawing on the Swift standard library and Apple’s system SDKs to manipulate the very fabric of time itself… or at least it’ll feel that way by the time we’re done.
  outcome: |
   This session covers more advanced date and time code. An attendee will be able to reliably schedule notifications in the user's local time, find dates in the future, and even work with calendars with different numbers of months, days in the week, and more!
  subtype: presentation
  complexity: "Advanced"
  speakers: ["22"]
-
  id: "018"
  title: "Secrets and Lies"
  description: |
   Security is hard. It’s filled with complex math and obscure system details, but that isn’t why it’s hard. Security is hard because it requires a different way of thinking. It’s about what systems really do rather than what they’re supposed to do. It’s about making things fail rather than succeed. It’s about controls and response more often than code and algorithms. And at its best it’s invisible and thankless. You never know all the bad things that didn’t happen.
   Security is critical. In our hyper-connected systems filled with sensitive information, we need developers who understand how to think about security and how to implement secure systems. Security requires expertise, but it can’t just be left to experts. It has to be a part of every stage of development. No one wants to be the next company listed under an embarrassing headline.
  outcome: |
   - How to think about security and apply it at each stage of development
   - What problems security can and can’t solve
   - The basic tools and techniques attackers use
   - How to make your systems resilient against attack
   - The difference between encryption and obfuscation and how to use each correctly
   - How to authenticate users and handle passwords
  subtype: presentation
  speakers: ["14"]
-
  id: "019"
  title: "What Happens When iOS Turns Against You"
  description: |
   Follow me on a journey of peril and intrigue as I walk you through the most difficult bug of my career. The many frameworks of Cocoa Touch are the cornerstone of modern iOS apps. But what happens when the building blocks start to work against you? I'll take you through the lifecycle of a bug we encountered at Tinder on the eve of the launch of iOS 12. To this day, it is one of the most puzzling and challenging issues I've encountered. The solution to which has wide-ranging implications in any app that utilizes NSUserDefaults. At the end of this session, you will learn steps you can take to avoid a devastating pitfall in Foundation. This issue was discovered in Tinder and I will walk you through a possible solution should you encounter it in your own apps as well.
  outcome: |
   Attendees should expect to walk away with an understanding of the deeper workings of UserDefaults and unexpected, yet commonly experienced, issues with the defaults system.
  subtype: presentation
  speakers: ["24"]
  complexity: "Intermediate"
-
  id: "020"
  title: "Protocol Oriented Programming"
  description: |
   TBA
  outcome: |
    - TBA
  subtype: presentation
  complexity: "Advanced"
  speakers: ["6"]
-
  id: "021"
  title: "Empowering Your Ecosystem"
  description: |
   The ecosystem of the Swift programming language is at an interesting inflection point. David will talk about his take on some ways forward, as well as how to embrace the opportunity it has to push Swift’s footprint on the software development world into the stratosphere.
  outcome: |
    - How other software communities operate and contribute to open source
    - The key differences between Swift and other communities that makes this inflection point different
    - How you can create Swift packages today for any platform to boost the community
  subtype: presentation
  complexity: "Intermediate"
  speakers: ["5"]
-
  id: "023"
  title: "Bringing Robinhood Ticker to Tinder"
  description: |
   Tinder's famous LikesYou feature has a golden pill view that shows the number of swipe rights a particular user receives while using the app. Inspired by Robinhood's stock ticker, Tinder has recently upgraded their pill view to have similar sweet scrolling animation. However, since the pill view had letters along with digits, it faced different set of problems. The session will explain how this unique ticker view has been implemented.Through this talk, you will be able to understand what it takes to implement a tickerView like the one from Robinhood and how Tinder has solved the unique set of challenges due to implementing scrolling digits and letters in a single view.
  outcome: |
    At the end of this session, you will be able to create a ticker view just like the one from Robinhood and understand how Tinder solved its unique set of problems due to scrolling digits and letters with localization within the same view.
  subtype: presentation
  complexity: "intermediate"
  speakers: ["23"]
-
  id: "024"
  title: "iOS at Scale(ish)"
  description: |
   Wayfair has one of the largest iOS teams in Boston, with around 40 developers all working on a single product. Our codebase is large, it has a sizable amount of legacy code, and it is extremely active and constantly changing. Because of our size and scale, we are starting to encounter problems that impact our entire iOS team. These include:

    - Code ownership and code quality are tough to define and keep consistent.
    - Our transition to Swift, while having many benefits, has caused compile times to become a bottleneck for our developers.
    - As our team and codebase grow, effectively defining and pushing new best practices, architectures, and strategies is becoming more difficult.

   In order to help combat these problems, we decided to start the process of modularizing our codebase.  I believe our work to solve these issues can be applied to teams and organizations of any size. I'm confident that everyone will be able to take something away from my talk, be it big or small, and apply it to their own teams to help them work more efficiently and build great apps.
  outcome: |
   - How to define code ownership to reduce side effects
   - How to promote well structured APIs for all areas of our codebase
   - How to reduce the effects of Swift's compile times
   - How to push large scale changes across our team and codebase
  subtype: presentation
  complexity: "Advanced"
  speakers: ["28"]
-
  id: "025"
  title: "An Engineer's Code of Ethics"
  description: |
    Development does not exist in a vacuum. Society is the biggest system we can impact and everything you do is a part of that system, good and bad. Ultimately we must judge the weight and value of our work based on that impact.

    We should have a code of ethics in whatever we do because it allows us to measure our decisions against our values. An engineer is first and foremost a human being, but sometimes engineers ignore ethics and ship unethical features or outright products to users. With this talk I will answer some questions such as
      - What’s the code of ethics of an engineer?
      - Why many of the engineers that are working on products tend to not follow this code and push “unethical” code to production?
      - What are some examples of unethical features pushed to production?
      - What we can do as a community to persuade people to follow this code of ethics?

    The talk will kick off by outlining some of the basic principles an ethical engineer should follow
      1. A engineer is responsible for the work they put into the world. Engineering is a discipline of action. You are responsible for what you put into the world. It has your name on it.
      2. An engineer values impact over form. Engineering does not exist in a vacuum. Society is the biggest system we can impact and everything you do is a part of that system, good and bad.
      3. Accept full responsibility for their own work. If you write code that is unethical you should expect that you will have consequences for your actions.
      4. Work to develop software and related documents that respect the privacy of those who will be affected by that software. As an engineer you should write software and push code to production that doesn’t violate the privacy of the user.
    We have a duty as people building products for people on the other end of the screen, to build a product that they can love and trust. But we can only do that if we ourselves are transparent and straightforward in the way we do so and the route we take to get there.
  outcome: |
    - How we’re in this situation where many companies push unethical features into production
    - What we can do as a community to prevent that from happening
  subtype: presentation
  complexity: "intermediate"
  speakers: ["29"]
-
  id: "026"
  title: "Encoding and Decoding in Swift"
  description: |
   Ever wonder what’s actually going on inside JSONEncoder and JSONDecoder? Why doesn't JSONEncoder conform to the Encoder protocol? What's a CodingKey, and what are all of those "containers" for?
   This talk will be a deep dive into encoding and decoding in Swift: what all of the related protocols are, how they fit together, and how to use them. You will come away from this talk ready to customize how your Swift types are encoded and decoded, and with the knowledge necessary to start writing encoders and decoders of your own.
  outcome: |
   - You will learn how to highly customize how your Swift types are encoded and decoded, and how standard library encoder and decoders work under the hood
   - You will gain the necessary background knowledge to even write encoders and decoders of your own

  subtype: presentation
  complexity: "advanced"
  speakers: ["15"]
-
  id: "056"
  title: "Powering Mobile eCommerce via Data Science"
  description: |
   Ever wonder why a website is recommending that hot pink dress shirt to you? What happens when you’re browsing and tap into a product you like? It’s all part of the fine tuned machine which is data science.
   This talk will detail how Rue La La has used data science to drive revenue, enhance personalized shopping and provide an engaging mobile app experience. We hope that by the end of this talk all attendees will have an understanding of big data, machine learning and the impact it is having on eCommerce at large.
  outcome: |
   - Basic understanding of data science
   - Why combining UX with data science is so important
   - How mobile and data science are powering the future of ecommerce
  subtype: presentation
  complexity: "intermediate"
  speakers: ["60", "61"]
-
  id: "057"
  title: "Code Reviews – Establishing a Quality Culture"
  description: |
   Writing code is a combination of creativity and logic. Every developer wants to make sure their work is feature-perfect, bug-free, and provides a delightful experience to the end user. But how do they make sure that their code maintains the quality they consistently strive for? How can they write code that is maintainable, stable, and offers a learning opportunity to other team members? In this presentation, Jayesh Kawli will describe the process of reviewing code and how it helps to write high quality, crash-free code that is confidently written and thoroughly assessed.

   When asking "When should my code go through code review?", the answer should be "Every time you change the codebase!". A change to even one line of code can cause catastrophic effects to app quality and customer satisfaction, which has a direct impact on company revenue. "What is the process for code review?" There are many answers to this question and we will discuss some of the more successful strategies that have been used to date.
  outcome: |
   - What is code reviewing?
   - Why is it important and how should it be incorporated into the development lifecycle?
   - Identification of key factors that the reviewer should look into while reviewing code
   - Essential skills for better communication and sharing of ideas
  subtype: presentation
  complexity: "intermediate"
  speakers: ["66"]
-
  id: "027"
  title: "You Belong With Me: An Extension Love Story"
  description: |
    Extensions allow you to add functionality to a previously existing class, structure, enumeration, or protocol. This gives you the power to add new behavior to your own code, third-party libraries, and even Apple frameworks.  While this sounds simple, extensions allow you to up your Swift game and amplify your code in so many ways!  In this talk, we will explore using extensions to have cleaner code, conform to protocols, add new initializers, extend protocols, and so much more.  We’ll also show off some extensions that you didn’t even know that you wanted.  Fall in love with extensions today!
  outcome: |
   - What extensions are and how to add them to your code
   - How to use extensions for cleaner code and conforming to protocols
   - How to use extensions to add a new initializer to a class
   - How to use an extension to add methods to a protocol
   - Fun places to add convenience methods
  subtype: presentation
  complexity: "intermediate"
  speakers: ["9"]
-
  id: "028"
  title: "Choosing the Right Design Pattern (1.5h)"
  description: |
   Design patterns are reusable solutions to common development problems. They aren't project specific, so you can use them in countless apps. But which design pattern should you use for a particular problem? How do you know if one is better suited than another? If you wrestle with these questions in your own apps, you're in luck! This is exactly what you'll learn in this workshop.
   You'll first review a few common and niche design patterns. Specifically, you'll go over design patterns that solve similar problems but in different ways. Along the way, you'll learn a thing or two about design patterns, but most importantly, you'll learn a strategy for picking one pattern over another.
   This will be a hands-on workshop, so make sure you bring your laptop with you!
  outcome: |
    - How design pattern use cases often overlap
    - How to use class diagrams to model real-world app problems
    - How to judge if a design pattern is a good fit for a problem
    - How to evaluate one pattern versus another
  subtype: workshop
  complexity: "intermediate"
  speakers: ["50"]
-
  id: "029"
  title: "Training Core ML With Your Mobile Camera During A Conference Talk (1.5h)"
  description: |
   This will be a collaborative experience - come help David pick some objects to train a CoreML model on stage! We'll use an iPhone camera to take some photos, then we'll use IBM Watson to train the model. After that, with (literally) one line of code, we'll deploy the model into an iOS framework called Lumina to test the model on stage with all of the different objects!
  outcome: |
    - How to create a Core ML model with nothing but photos and text labels
    - How to integrate a Core ML model into an iOS app
    - How to integrate continuous learning into the above two points for an app that gets smarter as you go
  subtype: workshop
  complexity: "intermediate"
  speakers: ["51"]
-
  id: "030"
  title: "Building Great Tools with SwiftSyntax (1.5h)"
  description: |
   SwiftSyntax is the Swift project's library for working with Swift source code. In this workshop, you can learn how to rapidly prototype linting and formatting tools from the library's author. No prior knowledge of SwiftSyntax is required, but a good grasp of Swift itself will be necessary.
   Note that SwiftSyntax is only available in developer snapshots of the Swift toolchain; please install the latest Trunk development (master) toolchain snapshot before the workshop from <https://swift.org/downloads>.
  outcome: |
   - The structure of SwiftSyntax and how to use it to parse and generate Swift
   - How to use SyntaxVisitor to write linting/analysis tools that find real-world issues
   - How to leverage SyntaxRewriter to automatically enforce code styles
  subtype: workshop
  complexity: "intermediate"
  speakers: ["23", "32"]
-
  id: "031"
  title: "Closing Keynote: Using Your Superpowers for Good to Change the World!"
  description: |
   A 16 year old inspired me to learn to code.

   This lit the fuse that would take me on an amazing journey through challenges and victories while creating an app to help victims escape domestic violence and abuse.

   This is my story.

   This is the story of how someone with no coding experience got their app approved for the app store. There were challenges along the way which were far outweighed by the success, impact and achievements. Since its release, the social impact of the application has been incredible. Then a global technology giant came knocking, which brought a new life of excitement as well as being completely overwhelming. This story serves as an example of why women should be recognized as an equal and important part of the tech community.

   Come meet the Oprah of technology.
  subtype: presentation
  speakers: ["33"]
-
  id: "032"
  title: "Keynote: Make room for all, not war!: Inclusion means all y'all"
  description: |
   After 18 years of ups and downs in the tech industry, Diana Rodriguez has seen good, bad and ugly. Leading worldwide community organisation for a non-profit has been an interesting experience where she found herself advocating for the exact same things she had to stand up for 18 years ago. In a sincere and honest talk about diversity, inclusion and evolution in the tech ecosystem, this isn't a SJW rant. It's an account of the mishaps of a woman in tech who decided to make a difference.
   (what do you reckon?)
  subtype: presentation
  speakers: ["2"]
-
  id: "999"
  title: "Talk to be announced"
  description: "More speakers coming soon!"
  subtype: presentation
  speakers: []
-
  id: "998"
  title: "Workshop to be announced"
  description: "More speakers coming soon!"
  subtype: presentation
  speakers: []

-
  id: "1511"
  title: "The workshop continues…"
  description: "Each workshop is at least 90 minutes"
  subtype: meta
  speakers: []
-
  id: "1512"
  title: "The workshop ends…"
  description: "Each workshop is at least 90 minutes"
  subtype: meta
  speakers: []
-
  id: "666"
  title: ""
  description: "No talk or workshop in this time slot."
  subtype: meta
  speakers: []
-
  id: "888"
  title: "Opening Remarks"
  description: "Welcome to SwiftFest! Start the day with a few opening remarks and announcements from Giorgio Natili, SwiftFest team lead."
  subtype: meta
  speakers: []
